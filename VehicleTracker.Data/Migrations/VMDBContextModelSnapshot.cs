// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using VehicleTracker.Data;

namespace VehicleTracker.Data.Migrations
{
    [DbContext(typeof(VMDBContext))]
    partial class VMDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:Collation", "SQL_Latin1_General_CP1_CI_AS")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.7")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("VehicleTracker.Model.AppSetting", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AppSettings");
                });

            modelBuilder.Entity("VehicleTracker.Model.BreakOilCode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("BreakOilCodes");
                });

            modelBuilder.Entity("VehicleTracker.Model.Client", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("ContactNo1")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("ContactNo2")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<long>("CreatedById")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasMaxLength(1500)
                        .HasColumnType("nvarchar(1500)");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool?>("IsActive")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<decimal?>("Latitude")
                        .HasColumnType("decimal(18,4)");

                    b.Property<decimal?>("Longitude")
                        .HasColumnType("decimal(18,4)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int?>("Priority")
                        .HasColumnType("int");

                    b.Property<long?>("RouteId")
                        .HasColumnType("bigint");

                    b.Property<long>("UpdatedById")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("RouteId");

                    b.HasIndex("UpdatedById");

                    b.ToTable("Client");
                });

            modelBuilder.Entity("VehicleTracker.Model.CustomerProductPrice", b =>
                {
                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<decimal>("AssignedUnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<long>("CreatedById")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<long>("UpdatedById")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime");

                    b.HasKey("CustomerId", "ProductId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ProductId");

                    b.HasIndex("UpdatedById");

                    b.ToTable("CustomerProductPrice");
                });

            modelBuilder.Entity("VehicleTracker.Model.DailyVehicleBeat", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime");

                    b.Property<long?>("DriverId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("EndDateTime")
                        .HasColumnType("datetime");

                    b.Property<decimal?>("EndMilage")
                        .HasColumnType("decimal(10,2)");

                    b.Property<bool?>("IsActive")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<long>("RouteId")
                        .HasColumnType("bigint");

                    b.Property<long?>("SalesRepId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("StartDateTime")
                        .HasColumnType("datetime");

                    b.Property<decimal?>("StartingMilage")
                        .HasColumnType("decimal(10,2)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<long>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime");

                    b.Property<long>("VehicleId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DriverId");

                    b.HasIndex("RouteId");

                    b.HasIndex("SalesRepId");

                    b.HasIndex("UpdatedBy");

                    b.HasIndex("VehicleId");

                    b.ToTable("DailyVehicleBeat");
                });

            modelBuilder.Entity("VehicleTracker.Model.DailyVehicleBeatOrder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("AssignedById")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("AssignedDate")
                        .HasColumnType("datetime");

                    b.Property<long>("DailyVehicleBeatId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeliveredDateTime")
                        .HasColumnType("datetime");

                    b.Property<long>("OrderId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("AssignedById");

                    b.HasIndex("DailyVehicleBeatId");

                    b.HasIndex("OrderId");

                    b.ToTable("DailyVehicleBeatOrders");
                });

            modelBuilder.Entity("VehicleTracker.Model.DifferentialOilCode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("DifferentialOilCodes");
                });

            modelBuilder.Entity("VehicleTracker.Model.EgineCoolant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("EgineCoolants");
                });

            modelBuilder.Entity("VehicleTracker.Model.EngineOilCode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("EngineOilCodes");
                });

            modelBuilder.Entity("VehicleTracker.Model.Expense", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(10,2)");

                    b.Property<long>("CreatedById")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ExpenseCategoryId")
                        .HasColumnType("int");

                    b.Property<bool?>("IsActive")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<long>("UpdatedById")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ExpenseCategoryId");

                    b.HasIndex("UpdatedById");

                    b.ToTable("Expense");
                });

            modelBuilder.Entity("VehicleTracker.Model.ExpenseCategory", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("CategoryName")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.HasKey("Id");

                    b.ToTable("ExpenseCategory");
                });

            modelBuilder.Entity("VehicleTracker.Model.ExpenseImage", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AttachementName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Attachment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("ExpenseId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ExpenseId");

                    b.ToTable("ExpenseImage");
                });

            modelBuilder.Entity("VehicleTracker.Model.GearBoxOilCode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("GearBoxOilCodes");
                });

            modelBuilder.Entity("VehicleTracker.Model.PowerSteeringOilCode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("PowerSteeringOilCodes");
                });

            modelBuilder.Entity("VehicleTracker.Model.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AvailableQty")
                        .HasColumnType("int");

                    b.Property<long>("CreatedById")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsActive")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<int>("MaxOrderQty")
                        .HasColumnType("int");

                    b.Property<int>("MinOrderQty")
                        .HasColumnType("int");

                    b.Property<string>("ProductCode")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("SubProductCategoryId")
                        .HasColumnType("int");

                    b.Property<int>("SupplierId")
                        .HasColumnType("int");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<long>("UpdatedById")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("SubProductCategoryId");

                    b.HasIndex("SupplierId");

                    b.HasIndex("UpdatedById");

                    b.ToTable("Product");
                });

            modelBuilder.Entity("VehicleTracker.Model.ProductCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<bool?>("IsActive")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Picture")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ProductCategory");
                });

            modelBuilder.Entity("VehicleTracker.Model.ProductImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool?>("IsActive")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductImage");
                });

            modelBuilder.Entity("VehicleTracker.Model.ProductInventory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Action")
                        .HasColumnType("int");

                    b.Property<string>("BatchNo")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<long>("CreatedById")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateOfExpiration")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateOfManufacture")
                        .HasColumnType("datetime");

                    b.Property<bool?>("IsActive")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int?>("ProductReturnId")
                        .HasColumnType("int");

                    b.Property<int?>("PurchaseOrderId")
                        .HasColumnType("int");

                    b.Property<int>("ReceivedQty")
                        .HasColumnType("int");

                    b.Property<long>("UdatedById")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime");

                    b.Property<int>("WarehouseId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ProductId");

                    b.HasIndex("ProductReturnId");

                    b.HasIndex("PurchaseOrderId");

                    b.HasIndex("UdatedById");

                    b.HasIndex("WarehouseId");

                    b.ToTable("ProductInventory");
                });

            modelBuilder.Entity("VehicleTracker.Model.ProductInventoryOrder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ActionType")
                        .HasColumnType("int");

                    b.Property<long>("CreatedById")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<long?>("OrderId")
                        .HasColumnType("bigint");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Qty")
                        .HasColumnType("int");

                    b.Property<long>("UpdatedById")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime");

                    b.Property<int>("WarehouseId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.HasIndex("UpdatedById");

                    b.HasIndex("WarehouseId");

                    b.ToTable("ProductInventoryOrder");
                });

            modelBuilder.Entity("VehicleTracker.Model.ProductReturn", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<long>("CreatedById")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Qty")
                        .HasColumnType("int");

                    b.Property<string>("Reason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ReasonCode")
                        .HasColumnType("int");

                    b.Property<DateTime>("ReturnDate")
                        .HasColumnType("datetime");

                    b.Property<long?>("SaleOrderId")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<long>("UpdatedById")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ProductId");

                    b.HasIndex("SaleOrderId");

                    b.HasIndex("UpdatedById");

                    b.ToTable("ProductReturn");
                });

            modelBuilder.Entity("VehicleTracker.Model.ProductSubCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<bool?>("IsActive")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Picture")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProductCategoryId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductCategoryId");

                    b.ToTable("ProductSubCategory");
                });

            modelBuilder.Entity("VehicleTracker.Model.PurchaseOrder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Attachment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("CreatedById")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime");

                    b.Property<decimal>("Discount")
                        .HasColumnType("decimal(10,2)");

                    b.Property<bool?>("IsActive")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("Ponumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)")
                        .HasColumnName("PONumber");

                    b.Property<string>("Remark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("ShipingCharge")
                        .HasColumnType("decimal(10,2)");

                    b.Property<int>("ShippedToWharehouseId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<decimal>("SubTotal")
                        .HasColumnType("decimal(10,2)");

                    b.Property<int>("SupplierId")
                        .HasColumnType("int");

                    b.Property<decimal>("TaxRate")
                        .HasColumnType("decimal(10,2)");

                    b.Property<string>("Terms")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Total")
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal>("TotalTaxAmount")
                        .HasColumnType("decimal(10,2)");

                    b.Property<long>("UpdatedById")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ShippedToWharehouseId");

                    b.HasIndex("SupplierId");

                    b.HasIndex("UpdatedById");

                    b.ToTable("PurchaseOrder");
                });

            modelBuilder.Entity("VehicleTracker.Model.PurchaseOrderDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("PurchaseOrderId")
                        .HasColumnType("int");

                    b.Property<int>("Qty")
                        .HasColumnType("int");

                    b.Property<string>("Remark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Total")
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(10,2)");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("PurchaseOrderId");

                    b.ToTable("PurchaseOrderDetail");
                });

            modelBuilder.Entity("VehicleTracker.Model.PurchaseOrderPayment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(10,2)");

                    b.Property<string>("Attachment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("CreatedById")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime");

                    b.Property<int>("PurchaseOrderId")
                        .HasColumnType("int");

                    b.Property<long>("UpdatedById")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.ToTable("PurchaseOrderPayment");
                });

            modelBuilder.Entity("VehicleTracker.Model.PurchaseOrderSendingHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Ccaddresses")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)")
                        .HasColumnName("CCAddresses");

                    b.Property<string>("PoorderPath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("POOrderPath");

                    b.Property<int>("PurchaseOrderId")
                        .HasColumnType("int");

                    b.Property<int>("SendingStatus")
                        .HasColumnType("int");

                    b.Property<long>("SentBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("SentOn")
                        .HasColumnType("datetime");

                    b.Property<string>("ToAddresses")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<int>("VersionNo")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PurchaseOrderId");

                    b.HasIndex("SentBy");

                    b.ToTable("PurchaseOrderSendingHistory");
                });

            modelBuilder.Entity("VehicleTracker.Model.Role", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Role");
                });

            modelBuilder.Entity("VehicleTracker.Model.Route", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("EndFrom")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<bool?>("IsActive")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("Name")
                        .HasMaxLength(350)
                        .HasColumnType("nvarchar(350)");

                    b.Property<string>("RouteCode")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("StartFrom")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<decimal?>("TotalDistance")
                        .HasColumnType("decimal(6,2)");

                    b.HasKey("Id");

                    b.ToTable("Route");
                });

            modelBuilder.Entity("VehicleTracker.Model.SalesOrder", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("CreatedById")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DeliveredDate")
                        .HasColumnType("datetime");

                    b.Property<decimal>("Discount")
                        .HasColumnType("decimal(10,2)");

                    b.Property<bool?>("IsActive")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime");

                    b.Property<string>("OrderNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("OwnerId")
                        .HasColumnType("int");

                    b.Property<string>("Remarks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("ShippingCharge")
                        .HasColumnType("decimal(10,4)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<decimal>("SubTotal")
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal>("TaxRate")
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal>("TotalTaxAmount")
                        .HasColumnType("decimal(10,2)");

                    b.Property<long>("UpdatedById")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("OwnerId");

                    b.HasIndex("Status");

                    b.HasIndex("UpdatedById");

                    b.ToTable("SalesOrder");
                });

            modelBuilder.Entity("VehicleTracker.Model.SalesOrderItem", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("OrderId")
                        .HasColumnType("bigint");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Qty")
                        .HasColumnType("int");

                    b.Property<decimal>("Total")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("SalesOrderItems");
                });

            modelBuilder.Entity("VehicleTracker.Model.SalesOrderStatus", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("ColorCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("RemindDays")
                        .HasColumnType("int");

                    b.Property<int>("Sequence")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("SalesOrderStatus");
                });

            modelBuilder.Entity("VehicleTracker.Model.Supplier", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AccountNo")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Address")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Bank")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Branch")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("BranchCode")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("City")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Country")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<long>("CreatedById")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email1")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Email2")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<bool?>("IsActive")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("OurRefNo")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Phone1")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("Phone2")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("State")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<long>("UpdatedById")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("ZipCode")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("UpdatedById");

                    b.ToTable("Supplier");
                });

            modelBuilder.Entity("VehicleTracker.Model.TimeZoneDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("TimeZoneId")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("TimeZoneID");

                    b.HasKey("Id");

                    b.ToTable("TimeZoneDetails");
                });

            modelBuilder.Entity("VehicleTracker.Model.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DrivingLicenceBackImage")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("DrivingLicenceFrontImage")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("DrivingLicenceNo")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Email")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Image")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool?>("IsActive")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("MobileNo")
                        .HasMaxLength(12)
                        .HasColumnType("nvarchar(12)");

                    b.Property<string>("NicbackImage")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("NICBackImage");

                    b.Property<string>("NicfrontImage")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("NICFrontImage");

                    b.Property<string>("Nicno")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("NICNo");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PersonalAddress")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int?>("TimeZoneId")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Id");

                    b.HasIndex("TimeZoneId");

                    b.ToTable("User");
                });

            modelBuilder.Entity("VehicleTracker.Model.UserRole", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime");

                    b.Property<bool?>("IsActive")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<DateTime>("StartedDate")
                        .HasColumnType("datetime");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRole");
                });

            modelBuilder.Entity("VehicleTracker.Model.Vehicle", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<bool>("HasDifferentialOil")
                        .HasColumnType("bit");

                    b.Property<bool>("HasFitnessReport")
                        .HasColumnType("bit");

                    b.Property<bool>("HasGreeceNipple")
                        .HasColumnType("bit");

                    b.Property<decimal>("InitialOdometerReading")
                        .HasColumnType("decimal(10,2)");

                    b.Property<bool?>("IsActive")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<int>("ProductionYear")
                        .HasColumnType("int");

                    b.Property<string>("RegistrationNo")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<long>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("UpdatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long>("VehicelTypeId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("VehicelTypeId");

                    b.ToTable("Vehicle");
                });

            modelBuilder.Entity("VehicleTracker.Model.VehicleAirCleaner", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("AirCleanerReplaceMilage")
                        .HasColumnType("decimal(10,2)");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<decimal>("NextAirCleanerReplaceMilage")
                        .HasColumnType("decimal(10,2)");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime");

                    b.Property<long>("VehicleId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("UpdatedBy");

                    b.HasIndex("VehicleId");

                    b.ToTable("VehicleAirCleaner");
                });

            modelBuilder.Entity("VehicleTracker.Model.VehicleDifferentialOilChangeMilage", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<decimal>("DifferentialOilChangeMilage")
                        .HasColumnType("decimal(10,2)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<decimal>("NextDifferentialOilChangeMilage")
                        .HasColumnType("decimal(10,2)");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime");

                    b.Property<long>("VehicleId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("UpdatedBy");

                    b.HasIndex("VehicleId");

                    b.ToTable("VehicleDifferentialOilChangeMilage");
                });

            modelBuilder.Entity("VehicleTracker.Model.VehicleEmissiontTest", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Attachment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("EmissiontTestDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("ValidTill")
                        .HasColumnType("datetime");

                    b.Property<long>("VehicleId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("UpdatedBy");

                    b.HasIndex("VehicleId");

                    b.ToTable("VehicleEmissiontTest");
                });

            modelBuilder.Entity("VehicleTracker.Model.VehicleEngineOilMilage", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<decimal>("NextOilChangeMilage")
                        .HasColumnType("decimal(10,2)");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("OilChangeMilage")
                        .HasColumnType("decimal(10,2)");

                    b.Property<long>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime");

                    b.Property<long>("VehicleId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("UpdatedBy");

                    b.HasIndex("VehicleId");

                    b.ToTable("VehicleEngineOilMilage");
                });

            modelBuilder.Entity("VehicleTracker.Model.VehicleExpense", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<int>("VehicleExpenseType")
                        .HasColumnType("int");

                    b.Property<long>("VehicleId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("VehicleId");

                    b.ToTable("VehicleExpenses");
                });

            modelBuilder.Entity("VehicleTracker.Model.VehicleFitnessReport", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Attachment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("FitnessReportDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("ValidTill")
                        .HasColumnType("datetime");

                    b.Property<long>("VehicleId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("UpdatedBy");

                    b.HasIndex("VehicleId");

                    b.ToTable("VehicleFitnessReport");
                });

            modelBuilder.Entity("VehicleTracker.Model.VehicleFuelFilterMilage", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<decimal>("FuelFilterChangeMilage")
                        .HasColumnType("decimal(10,2)");

                    b.Property<bool?>("IsActive")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<decimal>("NextFuelFilterChangeMilage")
                        .HasColumnType("decimal(10,2)");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime");

                    b.Property<long>("VehicleId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("UpdatedBy");

                    b.HasIndex("VehicleId");

                    b.ToTable("VehicleFuelFilterMilage");
                });

            modelBuilder.Entity("VehicleTracker.Model.VehicleGearBoxOilMilage", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<decimal>("GearBoxOilChangeMilage")
                        .HasColumnType("decimal(10,2)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<decimal>("NextGearBoxOilChangeMilage")
                        .HasColumnType("decimal(10,2)");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime");

                    b.Property<long>("VehicleId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("UpdatedBy");

                    b.HasIndex("VehicleId");

                    b.ToTable("VehicleGearBoxOilMilage");
                });

            modelBuilder.Entity("VehicleTracker.Model.VehicleGreeceNiple", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("GreeceNipleReplaceDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime>("NextGreeceNipleReplaceDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime");

                    b.Property<long>("VehicleId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("UpdatedBy");

                    b.HasIndex("VehicleId");

                    b.ToTable("VehicleGreeceNiple");
                });

            modelBuilder.Entity("VehicleTracker.Model.VehicleInsurance", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Attachment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("InsuranceDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("ValidTill")
                        .HasColumnType("datetime");

                    b.Property<long>("VehicleId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("UpdatedBy");

                    b.HasIndex("VehicleId");

                    b.ToTable("VehicleInsurance");
                });

            modelBuilder.Entity("VehicleTracker.Model.VehicleRevenueLicence", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Attachment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RevenueLicenceDate")
                        .HasColumnType("datetime");

                    b.Property<long>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("ValidTill")
                        .HasColumnType("datetime");

                    b.Property<long>("VehicleId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("UpdatedBy");

                    b.HasIndex("VehicleId");

                    b.ToTable("VehicleRevenueLicence");
                });

            modelBuilder.Entity("VehicleTracker.Model.VehicleType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AirCleanerMilage")
                        .HasColumnType("int");

                    b.Property<int?>("BreakOilId")
                        .HasColumnType("int");

                    b.Property<int?>("DifferentialOilChangeMilage")
                        .HasColumnType("int");

                    b.Property<int?>("DifferentialOilId")
                        .HasColumnType("int");

                    b.Property<int>("EmitionTestAge")
                        .HasColumnType("int");

                    b.Property<int?>("EngineCoolantId")
                        .HasColumnType("int");

                    b.Property<int?>("EngineOilChangeMilage")
                        .HasColumnType("int");

                    b.Property<int?>("EngineOilId")
                        .HasColumnType("int");

                    b.Property<int?>("FitnessReportAge")
                        .HasColumnType("int");

                    b.Property<int?>("FuelFilterChangeMilage")
                        .HasColumnType("int");

                    b.Property<string>("FuelFilterNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("FuelType")
                        .HasColumnType("int");

                    b.Property<int?>("GearBoxChangeMilage")
                        .HasColumnType("int");

                    b.Property<int?>("GearBoxOilId")
                        .HasColumnType("int");

                    b.Property<int?>("GreeceNipleAge")
                        .HasColumnType("int");

                    b.Property<bool>("HasDifferentialOil")
                        .HasColumnType("bit");

                    b.Property<bool>("HasFitnessReport")
                        .HasColumnType("bit");

                    b.Property<bool>("HasGreeceNipple")
                        .HasColumnType("bit");

                    b.Property<int>("InsuranceAge")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("PowerSteeringOilId")
                        .HasColumnType("int");

                    b.Property<int>("RevenueLicenceAge")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BreakOilId");

                    b.HasIndex("DifferentialOilId");

                    b.HasIndex("EngineCoolantId");

                    b.HasIndex("EngineOilId");

                    b.HasIndex("GearBoxOilId");

                    b.HasIndex("PowerSteeringOilId");

                    b.ToTable("VehicleType");
                });

            modelBuilder.Entity("VehicleTracker.Model.Wharehouse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Country")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<long>("CreatedById")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<decimal?>("FloorSpace")
                        .HasColumnType("decimal(10,2)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<long>("ManagerId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Phone")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("State")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<long>("UpdatedById")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("ZipCode")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ManagerId");

                    b.HasIndex("UpdatedById");

                    b.ToTable("Wharehouse");
                });

            modelBuilder.Entity("VehicleTracker.Model.Client", b =>
                {
                    b.HasOne("VehicleTracker.Model.User", "CreatedBy")
                        .WithMany("ClientCreatedBies")
                        .HasForeignKey("CreatedById")
                        .HasConstraintName("FK_Client_User")
                        .IsRequired();

                    b.HasOne("VehicleTracker.Model.Route", "Route")
                        .WithMany("Clients")
                        .HasForeignKey("RouteId")
                        .HasConstraintName("FK_Client_Route");

                    b.HasOne("VehicleTracker.Model.User", "UpdatedBy")
                        .WithMany("ClientUpdatedBies")
                        .HasForeignKey("UpdatedById")
                        .HasConstraintName("FK_Client_User1")
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("Route");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("VehicleTracker.Model.CustomerProductPrice", b =>
                {
                    b.HasOne("VehicleTracker.Model.User", "CreatedBy")
                        .WithMany("CustomerProductPriceCreatedBies")
                        .HasForeignKey("CreatedById")
                        .HasConstraintName("FK_CustomerProductPrice_User")
                        .IsRequired();

                    b.HasOne("VehicleTracker.Model.Client", "Customer")
                        .WithMany("CustomerProductPrices")
                        .HasForeignKey("CustomerId")
                        .HasConstraintName("FK_CustomerProductPrice_Client")
                        .IsRequired();

                    b.HasOne("VehicleTracker.Model.Product", "Product")
                        .WithMany("CustomerProductPrices")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("FK_CustomerProductPrice_Product")
                        .IsRequired();

                    b.HasOne("VehicleTracker.Model.User", "UpdatedBy")
                        .WithMany("CustomerProductPriceUpdatedBies")
                        .HasForeignKey("UpdatedById")
                        .HasConstraintName("FK_CustomerProductPrice_User1")
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("Customer");

                    b.Navigation("Product");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("VehicleTracker.Model.DailyVehicleBeat", b =>
                {
                    b.HasOne("VehicleTracker.Model.User", "CreatedByNavigation")
                        .WithMany("DailyVehicleBeatCreatedByNavigations")
                        .HasForeignKey("CreatedBy")
                        .HasConstraintName("FK_DailyVehicleBeat_User")
                        .IsRequired();

                    b.HasOne("VehicleTracker.Model.User", "Driver")
                        .WithMany("DailyVehicleBeatDrivers")
                        .HasForeignKey("DriverId")
                        .HasConstraintName("FK_DailyVehicleBeat_User3");

                    b.HasOne("VehicleTracker.Model.Route", "Route")
                        .WithMany("DailyVehicleBeats")
                        .HasForeignKey("RouteId")
                        .HasConstraintName("FK_DailyVehicleBeat_Route")
                        .IsRequired();

                    b.HasOne("VehicleTracker.Model.User", "SalesRep")
                        .WithMany("DailyVehicleBeatSalesReps")
                        .HasForeignKey("SalesRepId")
                        .HasConstraintName("FK_DailyVehicleBeat_User2");

                    b.HasOne("VehicleTracker.Model.User", "UpdatedByNavigation")
                        .WithMany("DailyVehicleBeatUpdatedByNavigations")
                        .HasForeignKey("UpdatedBy")
                        .HasConstraintName("FK_DailyVehicleBeat_User1")
                        .IsRequired();

                    b.HasOne("VehicleTracker.Model.Vehicle", "Vehicle")
                        .WithMany("DailyVehicleBeats")
                        .HasForeignKey("VehicleId")
                        .HasConstraintName("FK_DailyVehicleBeat_Vehicle")
                        .IsRequired();

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("Driver");

                    b.Navigation("Route");

                    b.Navigation("SalesRep");

                    b.Navigation("UpdatedByNavigation");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("VehicleTracker.Model.DailyVehicleBeatOrder", b =>
                {
                    b.HasOne("VehicleTracker.Model.User", "AssignedBy")
                        .WithMany("DailyVehicleBeatOrders")
                        .HasForeignKey("AssignedById")
                        .HasConstraintName("FK_DailyVehicleBeatOrders_User")
                        .IsRequired();

                    b.HasOne("VehicleTracker.Model.DailyVehicleBeat", "DailyVehicleBeat")
                        .WithMany("DailyVehicleBeatOrders")
                        .HasForeignKey("DailyVehicleBeatId")
                        .HasConstraintName("FK_DailyBeatOrders_DailyVehicleBeat")
                        .IsRequired();

                    b.HasOne("VehicleTracker.Model.SalesOrder", "Order")
                        .WithMany("DailyVehicleBeatOrders")
                        .HasForeignKey("OrderId")
                        .HasConstraintName("FK_DailyBeatOrders_Order")
                        .IsRequired();

                    b.Navigation("AssignedBy");

                    b.Navigation("DailyVehicleBeat");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("VehicleTracker.Model.Expense", b =>
                {
                    b.HasOne("VehicleTracker.Model.User", "CreatedBy")
                        .WithMany("ExpenseCreatedBies")
                        .HasForeignKey("CreatedById")
                        .HasConstraintName("FK_Expense_User")
                        .IsRequired();

                    b.HasOne("VehicleTracker.Model.ExpenseCategory", "ExpenseCategory")
                        .WithMany("Expenses")
                        .HasForeignKey("ExpenseCategoryId")
                        .HasConstraintName("FK_Expense_ExpenseCategory")
                        .IsRequired();

                    b.HasOne("VehicleTracker.Model.User", "UpdatedBy")
                        .WithMany("ExpenseUpdatedBies")
                        .HasForeignKey("UpdatedById")
                        .HasConstraintName("FK_Expense_User1")
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("ExpenseCategory");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("VehicleTracker.Model.ExpenseImage", b =>
                {
                    b.HasOne("VehicleTracker.Model.Expense", "Expense")
                        .WithMany("ExpenseImages")
                        .HasForeignKey("ExpenseId")
                        .HasConstraintName("FK_ExpenseImage_Expense")
                        .IsRequired();

                    b.Navigation("Expense");
                });

            modelBuilder.Entity("VehicleTracker.Model.Product", b =>
                {
                    b.HasOne("VehicleTracker.Model.User", "CreatedBy")
                        .WithMany("ProductCreatedBies")
                        .HasForeignKey("CreatedById")
                        .HasConstraintName("FK_Product_User")
                        .IsRequired();

                    b.HasOne("VehicleTracker.Model.ProductSubCategory", "SubProductCategory")
                        .WithMany("Products")
                        .HasForeignKey("SubProductCategoryId")
                        .HasConstraintName("FK_Product_ProductSubCategory")
                        .IsRequired();

                    b.HasOne("VehicleTracker.Model.Supplier", "Supplier")
                        .WithMany("Products")
                        .HasForeignKey("SupplierId")
                        .HasConstraintName("FK_Product_Supplier")
                        .IsRequired();

                    b.HasOne("VehicleTracker.Model.User", "UpdatedBy")
                        .WithMany("ProductUpdatedBies")
                        .HasForeignKey("UpdatedById")
                        .HasConstraintName("FK_Product_User1")
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("SubProductCategory");

                    b.Navigation("Supplier");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("VehicleTracker.Model.ProductImage", b =>
                {
                    b.HasOne("VehicleTracker.Model.Product", "Product")
                        .WithMany("ProductImages")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("FK_ProductImage_ProductImage");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("VehicleTracker.Model.ProductInventory", b =>
                {
                    b.HasOne("VehicleTracker.Model.User", "CreatedBy")
                        .WithMany("ProductInventoryCreatedBies")
                        .HasForeignKey("CreatedById")
                        .HasConstraintName("FK_ProductInventory_User")
                        .IsRequired();

                    b.HasOne("VehicleTracker.Model.Product", "Product")
                        .WithMany("ProductInventories")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("FK_ProductInventory_Product")
                        .IsRequired();

                    b.HasOne("VehicleTracker.Model.ProductReturn", "ProductReturn")
                        .WithMany("ProductInventories")
                        .HasForeignKey("ProductReturnId")
                        .HasConstraintName("FK_ProductInventory_ProductReturn");

                    b.HasOne("VehicleTracker.Model.PurchaseOrder", "PurchaseOrder")
                        .WithMany("ProductInventories")
                        .HasForeignKey("PurchaseOrderId")
                        .HasConstraintName("FK_ProductInventory_PurchaseOrder");

                    b.HasOne("VehicleTracker.Model.User", "UdatedBy")
                        .WithMany("ProductInventoryUdatedBies")
                        .HasForeignKey("UdatedById")
                        .HasConstraintName("FK_ProductInventory_User1")
                        .IsRequired();

                    b.HasOne("VehicleTracker.Model.Wharehouse", "Warehouse")
                        .WithMany("ProductInventories")
                        .HasForeignKey("WarehouseId")
                        .HasConstraintName("FK_ProductInventory_Wharehouse")
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("Product");

                    b.Navigation("ProductReturn");

                    b.Navigation("PurchaseOrder");

                    b.Navigation("UdatedBy");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("VehicleTracker.Model.ProductInventoryOrder", b =>
                {
                    b.HasOne("VehicleTracker.Model.User", "CreatedBy")
                        .WithMany("ProductInventoryOrderCreatedBies")
                        .HasForeignKey("CreatedById")
                        .HasConstraintName("FK_ProductInventoryOrder_User")
                        .IsRequired();

                    b.HasOne("VehicleTracker.Model.SalesOrder", "Order")
                        .WithMany("ProductInventoryOrders")
                        .HasForeignKey("OrderId")
                        .HasConstraintName("FK_ProductInventoryOrder_Order");

                    b.HasOne("VehicleTracker.Model.Product", "Product")
                        .WithMany("ProductInventoryOrders")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("FK_ProductInventoryOrder_Product")
                        .IsRequired();

                    b.HasOne("VehicleTracker.Model.User", "UpdatedBy")
                        .WithMany("ProductInventoryOrderUpdatedBies")
                        .HasForeignKey("UpdatedById")
                        .HasConstraintName("FK_ProductInventoryOrder_User1")
                        .IsRequired();

                    b.HasOne("VehicleTracker.Model.Wharehouse", "Warehouse")
                        .WithMany("ProductInventoryOrders")
                        .HasForeignKey("WarehouseId")
                        .HasConstraintName("FK_ProductInventoryOrder_Wharehouse")
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("Order");

                    b.Navigation("Product");

                    b.Navigation("UpdatedBy");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("VehicleTracker.Model.ProductReturn", b =>
                {
                    b.HasOne("VehicleTracker.Model.Client", "Client")
                        .WithMany("ProductReturns")
                        .HasForeignKey("ClientId")
                        .HasConstraintName("FK_ProductReturn_Client")
                        .IsRequired();

                    b.HasOne("VehicleTracker.Model.User", "CreatedBy")
                        .WithMany("ProductReturnCreatedBies")
                        .HasForeignKey("CreatedById")
                        .HasConstraintName("FK_ProductReturn_User")
                        .IsRequired();

                    b.HasOne("VehicleTracker.Model.Product", "Product")
                        .WithMany("ProductReturns")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("FK_ProductReturn_Product")
                        .IsRequired();

                    b.HasOne("VehicleTracker.Model.SalesOrder", "SaleOrder")
                        .WithMany("ProductReturns")
                        .HasForeignKey("SaleOrderId")
                        .HasConstraintName("FK_ProductReturn_Order");

                    b.HasOne("VehicleTracker.Model.User", "UpdatedBy")
                        .WithMany("ProductReturnUpdatedBies")
                        .HasForeignKey("UpdatedById")
                        .HasConstraintName("FK_ProductReturn_User1")
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("CreatedBy");

                    b.Navigation("Product");

                    b.Navigation("SaleOrder");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("VehicleTracker.Model.ProductSubCategory", b =>
                {
                    b.HasOne("VehicleTracker.Model.ProductCategory", "ProductCategory")
                        .WithMany("ProductSubCategories")
                        .HasForeignKey("ProductCategoryId")
                        .HasConstraintName("FK_ProductSubCategory_ProductCategory")
                        .IsRequired();

                    b.Navigation("ProductCategory");
                });

            modelBuilder.Entity("VehicleTracker.Model.PurchaseOrder", b =>
                {
                    b.HasOne("VehicleTracker.Model.User", "CreatedBy")
                        .WithMany("PurchaseOrderCreatedBies")
                        .HasForeignKey("CreatedById")
                        .HasConstraintName("FK_PurchaseOrder_User")
                        .IsRequired();

                    b.HasOne("VehicleTracker.Model.Wharehouse", "ShippedToWharehouse")
                        .WithMany("PurchaseOrders")
                        .HasForeignKey("ShippedToWharehouseId")
                        .HasConstraintName("FK_PurchaseOrder_Wharehouse")
                        .IsRequired();

                    b.HasOne("VehicleTracker.Model.Supplier", "Supplier")
                        .WithMany("PurchaseOrders")
                        .HasForeignKey("SupplierId")
                        .HasConstraintName("FK_PurchaseOrder_Supplier")
                        .IsRequired();

                    b.HasOne("VehicleTracker.Model.User", "UpdatedBy")
                        .WithMany("PurchaseOrderUpdatedBies")
                        .HasForeignKey("UpdatedById")
                        .HasConstraintName("FK_PurchaseOrder_User1")
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("ShippedToWharehouse");

                    b.Navigation("Supplier");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("VehicleTracker.Model.PurchaseOrderDetail", b =>
                {
                    b.HasOne("VehicleTracker.Model.Product", "Product")
                        .WithMany("PurchaseOrderDetails")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("FK_PurchaseOrderDetail_Product")
                        .IsRequired();

                    b.HasOne("VehicleTracker.Model.PurchaseOrder", "PurchaseOrder")
                        .WithMany("PurchaseOrderDetails")
                        .HasForeignKey("PurchaseOrderId")
                        .HasConstraintName("FK_PurchaseOrderDetail_PurchaseOrder")
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("PurchaseOrder");
                });

            modelBuilder.Entity("VehicleTracker.Model.PurchaseOrderSendingHistory", b =>
                {
                    b.HasOne("VehicleTracker.Model.PurchaseOrder", "PurchaseOrder")
                        .WithMany("PurchaseOrderSendingHistories")
                        .HasForeignKey("PurchaseOrderId")
                        .HasConstraintName("FK_PurchaseOrderSendingHistory_PurchaseOrder")
                        .IsRequired();

                    b.HasOne("VehicleTracker.Model.User", "SentByNavigation")
                        .WithMany("PurchaseOrderSendingHistories")
                        .HasForeignKey("SentBy")
                        .HasConstraintName("FK_PurchaseOrderSendingHistory_User")
                        .IsRequired();

                    b.Navigation("PurchaseOrder");

                    b.Navigation("SentByNavigation");
                });

            modelBuilder.Entity("VehicleTracker.Model.SalesOrder", b =>
                {
                    b.HasOne("VehicleTracker.Model.User", "CreatedBy")
                        .WithMany("SalesOrderCreatedBies")
                        .HasForeignKey("CreatedById")
                        .HasConstraintName("FK_Order_User")
                        .IsRequired();

                    b.HasOne("VehicleTracker.Model.Client", "Owner")
                        .WithMany("SalesOrders")
                        .HasForeignKey("OwnerId")
                        .HasConstraintName("FK_Order_Client");

                    b.HasOne("VehicleTracker.Model.SalesOrderStatus", "StatusNavigation")
                        .WithMany("SalesOrders")
                        .HasForeignKey("Status")
                        .HasConstraintName("FK_SalesOrder_SalesOrderStatus")
                        .IsRequired();

                    b.HasOne("VehicleTracker.Model.User", "UpdatedBy")
                        .WithMany("SalesOrderUpdatedBies")
                        .HasForeignKey("UpdatedById")
                        .HasConstraintName("FK_Order_User1")
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("Owner");

                    b.Navigation("StatusNavigation");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("VehicleTracker.Model.SalesOrderItem", b =>
                {
                    b.HasOne("VehicleTracker.Model.SalesOrder", "Order")
                        .WithMany("SalesOrderItems")
                        .HasForeignKey("OrderId")
                        .HasConstraintName("FK_OrderItems_Order")
                        .IsRequired();

                    b.HasOne("VehicleTracker.Model.Product", "Product")
                        .WithMany("SalesOrderItems")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("FK_SalesOrderItems_Product")
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("VehicleTracker.Model.Supplier", b =>
                {
                    b.HasOne("VehicleTracker.Model.User", "CreatedBy")
                        .WithMany("SupplierCreatedBies")
                        .HasForeignKey("CreatedById")
                        .HasConstraintName("FK_Supplier_User")
                        .IsRequired();

                    b.HasOne("VehicleTracker.Model.User", "UpdatedBy")
                        .WithMany("SupplierUpdatedBies")
                        .HasForeignKey("UpdatedById")
                        .HasConstraintName("FK_Supplier_User1")
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("VehicleTracker.Model.User", b =>
                {
                    b.HasOne("VehicleTracker.Model.TimeZoneDetail", "TimeZone")
                        .WithMany("Users")
                        .HasForeignKey("TimeZoneId")
                        .HasConstraintName("FK_User_TimeZoneDetails");

                    b.Navigation("TimeZone");
                });

            modelBuilder.Entity("VehicleTracker.Model.UserRole", b =>
                {
                    b.HasOne("VehicleTracker.Model.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .HasConstraintName("FK_UserRole_Role")
                        .IsRequired();

                    b.HasOne("VehicleTracker.Model.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_UserRole_User")
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("VehicleTracker.Model.Vehicle", b =>
                {
                    b.HasOne("VehicleTracker.Model.VehicleType", "VehicelType")
                        .WithMany("Vehicles")
                        .HasForeignKey("VehicelTypeId")
                        .HasConstraintName("FK_Vehicle_VehicleType")
                        .IsRequired();

                    b.Navigation("VehicelType");
                });

            modelBuilder.Entity("VehicleTracker.Model.VehicleAirCleaner", b =>
                {
                    b.HasOne("VehicleTracker.Model.User", "CreatedByNavigation")
                        .WithMany("VehicleAirCleanerCreatedByNavigations")
                        .HasForeignKey("CreatedBy")
                        .HasConstraintName("FK_VehicleAirCleaner_User")
                        .IsRequired();

                    b.HasOne("VehicleTracker.Model.User", "UpdatedByNavigation")
                        .WithMany("VehicleAirCleanerUpdatedByNavigations")
                        .HasForeignKey("UpdatedBy")
                        .HasConstraintName("FK_VehicleAirCleaner_User1")
                        .IsRequired();

                    b.HasOne("VehicleTracker.Model.Vehicle", "Vehicle")
                        .WithMany("VehicleAirCleaners")
                        .HasForeignKey("VehicleId")
                        .HasConstraintName("FK_VehicleAirCleaner_Vehicle")
                        .IsRequired();

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("UpdatedByNavigation");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("VehicleTracker.Model.VehicleDifferentialOilChangeMilage", b =>
                {
                    b.HasOne("VehicleTracker.Model.User", "CreatedByNavigation")
                        .WithMany("VehicleDifferentialOilChangeMilageCreatedByNavigations")
                        .HasForeignKey("CreatedBy")
                        .HasConstraintName("FK_VehicleDifferentialOilChangeMilage_User")
                        .IsRequired();

                    b.HasOne("VehicleTracker.Model.User", "UpdatedByNavigation")
                        .WithMany("VehicleDifferentialOilChangeMilageUpdatedByNavigations")
                        .HasForeignKey("UpdatedBy")
                        .HasConstraintName("FK_VehicleDifferentialOilChangeMilage_User1")
                        .IsRequired();

                    b.HasOne("VehicleTracker.Model.Vehicle", "Vehicle")
                        .WithMany("VehicleDifferentialOilChangeMilages")
                        .HasForeignKey("VehicleId")
                        .HasConstraintName("FK_VehicleDifferentialOilChangeMilage_Vehicle")
                        .IsRequired();

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("UpdatedByNavigation");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("VehicleTracker.Model.VehicleEmissiontTest", b =>
                {
                    b.HasOne("VehicleTracker.Model.User", "CreatedByNavigation")
                        .WithMany("VehicleEmissiontTestCreatedByNavigations")
                        .HasForeignKey("CreatedBy")
                        .HasConstraintName("FK_VehicleEmissiontTest_User")
                        .IsRequired();

                    b.HasOne("VehicleTracker.Model.User", "UpdatedByNavigation")
                        .WithMany("VehicleEmissiontTestUpdatedByNavigations")
                        .HasForeignKey("UpdatedBy")
                        .HasConstraintName("FK_VehicleEmissiontTest_User1")
                        .IsRequired();

                    b.HasOne("VehicleTracker.Model.Vehicle", "Vehicle")
                        .WithMany("VehicleEmissiontTests")
                        .HasForeignKey("VehicleId")
                        .HasConstraintName("FK_VehicleEmissiontTest_Vehicle")
                        .IsRequired();

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("UpdatedByNavigation");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("VehicleTracker.Model.VehicleEngineOilMilage", b =>
                {
                    b.HasOne("VehicleTracker.Model.User", "CreatedByNavigation")
                        .WithMany("VehicleEngineOilMilageCreatedByNavigations")
                        .HasForeignKey("CreatedBy")
                        .HasConstraintName("FK_VehicleEngineOilMilage_User")
                        .IsRequired();

                    b.HasOne("VehicleTracker.Model.User", "UpdatedByNavigation")
                        .WithMany("VehicleEngineOilMilageUpdatedByNavigations")
                        .HasForeignKey("UpdatedBy")
                        .HasConstraintName("FK_VehicleEngineOilMilage_User1")
                        .IsRequired();

                    b.HasOne("VehicleTracker.Model.Vehicle", "Vehicle")
                        .WithMany("VehicleEngineOilMilages")
                        .HasForeignKey("VehicleId")
                        .HasConstraintName("FK_VehicleEngineOilMilage_Vehicle")
                        .IsRequired();

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("UpdatedByNavigation");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("VehicleTracker.Model.VehicleExpense", b =>
                {
                    b.HasOne("VehicleTracker.Model.Expense", "IdNavigation")
                        .WithOne("VehicleExpense")
                        .HasForeignKey("VehicleTracker.Model.VehicleExpense", "Id")
                        .HasConstraintName("FK_VehicleExpenses_Expense")
                        .IsRequired();

                    b.HasOne("VehicleTracker.Model.Vehicle", "Vehicle")
                        .WithMany("VehicleExpenses")
                        .HasForeignKey("VehicleId")
                        .HasConstraintName("FK_VehicleExpenses_Vehicle")
                        .IsRequired();

                    b.Navigation("IdNavigation");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("VehicleTracker.Model.VehicleFitnessReport", b =>
                {
                    b.HasOne("VehicleTracker.Model.User", "CreatedByNavigation")
                        .WithMany("VehicleFitnessReportCreatedByNavigations")
                        .HasForeignKey("CreatedBy")
                        .HasConstraintName("FK_VehicleFitnessReport_User")
                        .IsRequired();

                    b.HasOne("VehicleTracker.Model.User", "UpdatedByNavigation")
                        .WithMany("VehicleFitnessReportUpdatedByNavigations")
                        .HasForeignKey("UpdatedBy")
                        .HasConstraintName("FK_VehicleFitnessReport_User1")
                        .IsRequired();

                    b.HasOne("VehicleTracker.Model.Vehicle", "Vehicle")
                        .WithMany("VehicleFitnessReports")
                        .HasForeignKey("VehicleId")
                        .HasConstraintName("FK_VehicleFitnessReport_Vehicle")
                        .IsRequired();

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("UpdatedByNavigation");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("VehicleTracker.Model.VehicleFuelFilterMilage", b =>
                {
                    b.HasOne("VehicleTracker.Model.User", "CreatedByNavigation")
                        .WithMany("VehicleFuelFilterMilageCreatedByNavigations")
                        .HasForeignKey("CreatedBy")
                        .HasConstraintName("FK_VehicleFuelFilterMilage_User")
                        .IsRequired();

                    b.HasOne("VehicleTracker.Model.User", "UpdatedByNavigation")
                        .WithMany("VehicleFuelFilterMilageUpdatedByNavigations")
                        .HasForeignKey("UpdatedBy")
                        .HasConstraintName("FK_VehicleFuelFilterMilage_User1")
                        .IsRequired();

                    b.HasOne("VehicleTracker.Model.Vehicle", "Vehicle")
                        .WithMany("VehicleFuelFilterMilages")
                        .HasForeignKey("VehicleId")
                        .HasConstraintName("FK_VehicleFuelFilterMilage_Vehicle")
                        .IsRequired();

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("UpdatedByNavigation");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("VehicleTracker.Model.VehicleGearBoxOilMilage", b =>
                {
                    b.HasOne("VehicleTracker.Model.User", "CreatedByNavigation")
                        .WithMany("VehicleGearBoxOilMilageCreatedByNavigations")
                        .HasForeignKey("CreatedBy")
                        .HasConstraintName("FK_VehicleGearBoxOilMilage_User")
                        .IsRequired();

                    b.HasOne("VehicleTracker.Model.User", "UpdatedByNavigation")
                        .WithMany("VehicleGearBoxOilMilageUpdatedByNavigations")
                        .HasForeignKey("UpdatedBy")
                        .HasConstraintName("FK_VehicleGearBoxOilMilage_User1")
                        .IsRequired();

                    b.HasOne("VehicleTracker.Model.Vehicle", "Vehicle")
                        .WithMany("VehicleGearBoxOilMilages")
                        .HasForeignKey("VehicleId")
                        .HasConstraintName("FK_VehicleGearBoxOilMilage_Vehicle")
                        .IsRequired();

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("UpdatedByNavigation");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("VehicleTracker.Model.VehicleGreeceNiple", b =>
                {
                    b.HasOne("VehicleTracker.Model.User", "CreatedByNavigation")
                        .WithMany("VehicleGreeceNipleCreatedByNavigations")
                        .HasForeignKey("CreatedBy")
                        .HasConstraintName("FK_VehicleGreeceNiple_User")
                        .IsRequired();

                    b.HasOne("VehicleTracker.Model.User", "UpdatedByNavigation")
                        .WithMany("VehicleGreeceNipleUpdatedByNavigations")
                        .HasForeignKey("UpdatedBy")
                        .HasConstraintName("FK_VehicleGreeceNiple_User1")
                        .IsRequired();

                    b.HasOne("VehicleTracker.Model.Vehicle", "Vehicle")
                        .WithMany("VehicleGreeceNiples")
                        .HasForeignKey("VehicleId")
                        .HasConstraintName("FK_VehicleGreeceNiple_Vehicle")
                        .IsRequired();

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("UpdatedByNavigation");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("VehicleTracker.Model.VehicleInsurance", b =>
                {
                    b.HasOne("VehicleTracker.Model.User", "CreatedByNavigation")
                        .WithMany("VehicleInsuranceCreatedByNavigations")
                        .HasForeignKey("CreatedBy")
                        .HasConstraintName("FK_VehicleInsurance_User")
                        .IsRequired();

                    b.HasOne("VehicleTracker.Model.User", "UpdatedByNavigation")
                        .WithMany("VehicleInsuranceUpdatedByNavigations")
                        .HasForeignKey("UpdatedBy")
                        .HasConstraintName("FK_VehicleInsurance_User1")
                        .IsRequired();

                    b.HasOne("VehicleTracker.Model.Vehicle", "Vehicle")
                        .WithMany("VehicleInsurances")
                        .HasForeignKey("VehicleId")
                        .HasConstraintName("FK_VehicleInsurance_Vehicle")
                        .IsRequired();

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("UpdatedByNavigation");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("VehicleTracker.Model.VehicleRevenueLicence", b =>
                {
                    b.HasOne("VehicleTracker.Model.User", "CreatedByNavigation")
                        .WithMany("VehicleRevenueLicenceCreatedByNavigations")
                        .HasForeignKey("CreatedBy")
                        .HasConstraintName("FK_VehicleRevenueLicence_User")
                        .IsRequired();

                    b.HasOne("VehicleTracker.Model.User", "UpdatedByNavigation")
                        .WithMany("VehicleRevenueLicenceUpdatedByNavigations")
                        .HasForeignKey("UpdatedBy")
                        .HasConstraintName("FK_VehicleRevenueLicence_User1")
                        .IsRequired();

                    b.HasOne("VehicleTracker.Model.Vehicle", "Vehicle")
                        .WithMany("VehicleRevenueLicences")
                        .HasForeignKey("VehicleId")
                        .HasConstraintName("FK_VehicleRevenueLicence_Vehicle")
                        .IsRequired();

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("UpdatedByNavigation");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("VehicleTracker.Model.VehicleType", b =>
                {
                    b.HasOne("VehicleTracker.Model.BreakOilCode", "BreakOil")
                        .WithMany("VehicleTypes")
                        .HasForeignKey("BreakOilId")
                        .HasConstraintName("FK_VehicleType_BreakOilCodes");

                    b.HasOne("VehicleTracker.Model.DifferentialOilCode", "DifferentialOil")
                        .WithMany("VehicleTypes")
                        .HasForeignKey("DifferentialOilId")
                        .HasConstraintName("FK_VehicleType_DifferentialOilCodes");

                    b.HasOne("VehicleTracker.Model.EgineCoolant", "EngineCoolant")
                        .WithMany("VehicleTypes")
                        .HasForeignKey("EngineCoolantId")
                        .HasConstraintName("FK_VehicleType_EgineCoolants");

                    b.HasOne("VehicleTracker.Model.EngineOilCode", "EngineOil")
                        .WithMany("VehicleTypes")
                        .HasForeignKey("EngineOilId")
                        .HasConstraintName("FK_VehicleType_EngineOilCodes");

                    b.HasOne("VehicleTracker.Model.GearBoxOilCode", "GearBoxOil")
                        .WithMany("VehicleTypes")
                        .HasForeignKey("GearBoxOilId")
                        .HasConstraintName("FK_VehicleType_GearBoxOilCodes");

                    b.HasOne("VehicleTracker.Model.PowerSteeringOilCode", "PowerSteeringOil")
                        .WithMany("VehicleTypes")
                        .HasForeignKey("PowerSteeringOilId")
                        .HasConstraintName("FK_VehicleType_PowerSteeringOilCodes");

                    b.Navigation("BreakOil");

                    b.Navigation("DifferentialOil");

                    b.Navigation("EngineCoolant");

                    b.Navigation("EngineOil");

                    b.Navigation("GearBoxOil");

                    b.Navigation("PowerSteeringOil");
                });

            modelBuilder.Entity("VehicleTracker.Model.Wharehouse", b =>
                {
                    b.HasOne("VehicleTracker.Model.User", "CreatedBy")
                        .WithMany("WharehouseCreatedBies")
                        .HasForeignKey("CreatedById")
                        .HasConstraintName("FK_Wharehouse_User")
                        .IsRequired();

                    b.HasOne("VehicleTracker.Model.User", "Manager")
                        .WithMany("WharehouseManagers")
                        .HasForeignKey("ManagerId")
                        .HasConstraintName("FK_Wharehouse_Wharehouse")
                        .IsRequired();

                    b.HasOne("VehicleTracker.Model.User", "UpdatedBy")
                        .WithMany("WharehouseUpdatedBies")
                        .HasForeignKey("UpdatedById")
                        .HasConstraintName("FK_Wharehouse_User1")
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("Manager");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("VehicleTracker.Model.BreakOilCode", b =>
                {
                    b.Navigation("VehicleTypes");
                });

            modelBuilder.Entity("VehicleTracker.Model.Client", b =>
                {
                    b.Navigation("CustomerProductPrices");

                    b.Navigation("ProductReturns");

                    b.Navigation("SalesOrders");
                });

            modelBuilder.Entity("VehicleTracker.Model.DailyVehicleBeat", b =>
                {
                    b.Navigation("DailyVehicleBeatOrders");
                });

            modelBuilder.Entity("VehicleTracker.Model.DifferentialOilCode", b =>
                {
                    b.Navigation("VehicleTypes");
                });

            modelBuilder.Entity("VehicleTracker.Model.EgineCoolant", b =>
                {
                    b.Navigation("VehicleTypes");
                });

            modelBuilder.Entity("VehicleTracker.Model.EngineOilCode", b =>
                {
                    b.Navigation("VehicleTypes");
                });

            modelBuilder.Entity("VehicleTracker.Model.Expense", b =>
                {
                    b.Navigation("ExpenseImages");

                    b.Navigation("VehicleExpense");
                });

            modelBuilder.Entity("VehicleTracker.Model.ExpenseCategory", b =>
                {
                    b.Navigation("Expenses");
                });

            modelBuilder.Entity("VehicleTracker.Model.GearBoxOilCode", b =>
                {
                    b.Navigation("VehicleTypes");
                });

            modelBuilder.Entity("VehicleTracker.Model.PowerSteeringOilCode", b =>
                {
                    b.Navigation("VehicleTypes");
                });

            modelBuilder.Entity("VehicleTracker.Model.Product", b =>
                {
                    b.Navigation("CustomerProductPrices");

                    b.Navigation("ProductImages");

                    b.Navigation("ProductInventories");

                    b.Navigation("ProductInventoryOrders");

                    b.Navigation("ProductReturns");

                    b.Navigation("PurchaseOrderDetails");

                    b.Navigation("SalesOrderItems");
                });

            modelBuilder.Entity("VehicleTracker.Model.ProductCategory", b =>
                {
                    b.Navigation("ProductSubCategories");
                });

            modelBuilder.Entity("VehicleTracker.Model.ProductReturn", b =>
                {
                    b.Navigation("ProductInventories");
                });

            modelBuilder.Entity("VehicleTracker.Model.ProductSubCategory", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("VehicleTracker.Model.PurchaseOrder", b =>
                {
                    b.Navigation("ProductInventories");

                    b.Navigation("PurchaseOrderDetails");

                    b.Navigation("PurchaseOrderSendingHistories");
                });

            modelBuilder.Entity("VehicleTracker.Model.Role", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("VehicleTracker.Model.Route", b =>
                {
                    b.Navigation("Clients");

                    b.Navigation("DailyVehicleBeats");
                });

            modelBuilder.Entity("VehicleTracker.Model.SalesOrder", b =>
                {
                    b.Navigation("DailyVehicleBeatOrders");

                    b.Navigation("ProductInventoryOrders");

                    b.Navigation("ProductReturns");

                    b.Navigation("SalesOrderItems");
                });

            modelBuilder.Entity("VehicleTracker.Model.SalesOrderStatus", b =>
                {
                    b.Navigation("SalesOrders");
                });

            modelBuilder.Entity("VehicleTracker.Model.Supplier", b =>
                {
                    b.Navigation("Products");

                    b.Navigation("PurchaseOrders");
                });

            modelBuilder.Entity("VehicleTracker.Model.TimeZoneDetail", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("VehicleTracker.Model.User", b =>
                {
                    b.Navigation("ClientCreatedBies");

                    b.Navigation("ClientUpdatedBies");

                    b.Navigation("CustomerProductPriceCreatedBies");

                    b.Navigation("CustomerProductPriceUpdatedBies");

                    b.Navigation("DailyVehicleBeatCreatedByNavigations");

                    b.Navigation("DailyVehicleBeatDrivers");

                    b.Navigation("DailyVehicleBeatOrders");

                    b.Navigation("DailyVehicleBeatSalesReps");

                    b.Navigation("DailyVehicleBeatUpdatedByNavigations");

                    b.Navigation("ExpenseCreatedBies");

                    b.Navigation("ExpenseUpdatedBies");

                    b.Navigation("ProductCreatedBies");

                    b.Navigation("ProductInventoryCreatedBies");

                    b.Navigation("ProductInventoryOrderCreatedBies");

                    b.Navigation("ProductInventoryOrderUpdatedBies");

                    b.Navigation("ProductInventoryUdatedBies");

                    b.Navigation("ProductReturnCreatedBies");

                    b.Navigation("ProductReturnUpdatedBies");

                    b.Navigation("ProductUpdatedBies");

                    b.Navigation("PurchaseOrderCreatedBies");

                    b.Navigation("PurchaseOrderSendingHistories");

                    b.Navigation("PurchaseOrderUpdatedBies");

                    b.Navigation("SalesOrderCreatedBies");

                    b.Navigation("SalesOrderUpdatedBies");

                    b.Navigation("SupplierCreatedBies");

                    b.Navigation("SupplierUpdatedBies");

                    b.Navigation("UserRoles");

                    b.Navigation("VehicleAirCleanerCreatedByNavigations");

                    b.Navigation("VehicleAirCleanerUpdatedByNavigations");

                    b.Navigation("VehicleDifferentialOilChangeMilageCreatedByNavigations");

                    b.Navigation("VehicleDifferentialOilChangeMilageUpdatedByNavigations");

                    b.Navigation("VehicleEmissiontTestCreatedByNavigations");

                    b.Navigation("VehicleEmissiontTestUpdatedByNavigations");

                    b.Navigation("VehicleEngineOilMilageCreatedByNavigations");

                    b.Navigation("VehicleEngineOilMilageUpdatedByNavigations");

                    b.Navigation("VehicleFitnessReportCreatedByNavigations");

                    b.Navigation("VehicleFitnessReportUpdatedByNavigations");

                    b.Navigation("VehicleFuelFilterMilageCreatedByNavigations");

                    b.Navigation("VehicleFuelFilterMilageUpdatedByNavigations");

                    b.Navigation("VehicleGearBoxOilMilageCreatedByNavigations");

                    b.Navigation("VehicleGearBoxOilMilageUpdatedByNavigations");

                    b.Navigation("VehicleGreeceNipleCreatedByNavigations");

                    b.Navigation("VehicleGreeceNipleUpdatedByNavigations");

                    b.Navigation("VehicleInsuranceCreatedByNavigations");

                    b.Navigation("VehicleInsuranceUpdatedByNavigations");

                    b.Navigation("VehicleRevenueLicenceCreatedByNavigations");

                    b.Navigation("VehicleRevenueLicenceUpdatedByNavigations");

                    b.Navigation("WharehouseCreatedBies");

                    b.Navigation("WharehouseManagers");

                    b.Navigation("WharehouseUpdatedBies");
                });

            modelBuilder.Entity("VehicleTracker.Model.Vehicle", b =>
                {
                    b.Navigation("DailyVehicleBeats");

                    b.Navigation("VehicleAirCleaners");

                    b.Navigation("VehicleDifferentialOilChangeMilages");

                    b.Navigation("VehicleEmissiontTests");

                    b.Navigation("VehicleEngineOilMilages");

                    b.Navigation("VehicleExpenses");

                    b.Navigation("VehicleFitnessReports");

                    b.Navigation("VehicleFuelFilterMilages");

                    b.Navigation("VehicleGearBoxOilMilages");

                    b.Navigation("VehicleGreeceNiples");

                    b.Navigation("VehicleInsurances");

                    b.Navigation("VehicleRevenueLicences");
                });

            modelBuilder.Entity("VehicleTracker.Model.VehicleType", b =>
                {
                    b.Navigation("Vehicles");
                });

            modelBuilder.Entity("VehicleTracker.Model.Wharehouse", b =>
                {
                    b.Navigation("ProductInventories");

                    b.Navigation("ProductInventoryOrders");

                    b.Navigation("PurchaseOrders");
                });
#pragma warning restore 612, 618
        }
    }
}
